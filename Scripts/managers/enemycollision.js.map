{"version":3,"sources":["managers/enemycollision.ts"],"names":[],"mappings":"AAAA,IAAO,QAAQ,CAkDd;AAlDD,WAAO,QAAQ,EAAC,CAAC;IACb,gCAAgC;IAChC;QAGI,wBAAY,KAAyB;YACjC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACxB,CAAC;QAED,uCAAuC;QAChC,iCAAQ,GAAf,UAAgB,UAA0B,EAAE,QAAwB;YAChE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;QACvG,CAAC;QAED,sEAAsE;QAC/D,8BAAK,GAAZ,UAAa,MAA0B;YACnC,IAAI,UAAU,GAAmB,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YACtD,IAAI,QAAQ,GAAmB,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YACpD,IAAI,gBAAgB,GAAW,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC;YACxD,IAAI,gBAAgB,GAAW,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC;YACnD,IAAI,eAAe,GAAW,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;YACtD,IAAI,eAAe,GAAW,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;YACjD,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClC,IAAI,eAAe,GAAW,eAAe,GAAG,eAAe,CAAC;YACpE,CAAC;YAAC,IAAI,CACN,CAAC;gBACG,IAAI,eAAe,GAAW,gBAAgB,GAAG,gBAAgB,CAAC;YACtE,CAAC;YACD,IAAI,WAAW,GAAG,KAAK,CAAC;YAExB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACnD,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAEnD,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;YACvC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;YAEvC,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,IAAI,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;gBAC7D,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAC/D,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,eAAe,CAAC,CAAC;YACnD,CAAC;YAED;mEACuD;YACvD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC;gBACzD,WAAW,GAAG,IAAI,CAAC;YACvB,CAAC;YAED,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;QACL,qBAAC;IAAD,CA/CA,AA+CC,IAAA;IA/CY,uBAAc,iBA+C1B,CAAA;AACL,CAAC,EAlDM,QAAQ,KAAR,QAAQ,QAkDd","file":"managers/enemycollision.js","sourcesContent":["module managers {\r\n    // ENEMY COLLISION MANAGER CLASS\r\n    export class EnemyCollision {\r\n        // PRIVATE INSTANCE VARIABLES\r\n        private _enemy: objects.GameObject;\r\n        constructor(enemy: objects.GameObject) {\r\n            this._enemy = enemy;\r\n        }\r\n\r\n        // find the distance between two points\r\n        public distance(startPoint: createjs.Point, endPoint: createjs.Point): number {\r\n            return Math.sqrt(Math.pow((endPoint.x - startPoint.x), 2) + Math.pow(endPoint.y - startPoint.y, 2))\r\n        }\r\n\r\n        // determine if the player's avatar collides with the specified object\r\n        public check(object: objects.GameObject): boolean {\r\n            var startPoint: createjs.Point = new createjs.Point();\r\n            var endPoint: createjs.Point = new createjs.Point();\r\n            var playerHalfHeight: number = this._enemy.height * 0.5;\r\n            var objectHalfHeight: number = object.height * 0.5;\r\n            var playerHalfWidth: number = this._enemy.width * 0.5;\r\n            var objectHalfWidth: number = object.width * 0.5;\r\n            if (object.name == this._enemy.name) { // bat-on-bat collisiions\r\n                var minimumDistance: number = playerHalfWidth + objectHalfWidth;\r\n            } else \r\n            {\r\n                var minimumDistance: number = playerHalfHeight + objectHalfHeight;\r\n            }\r\n            var isCollision = false;\r\n\r\n            startPoint.x = this._enemy.centerX + this._enemy.x;\r\n            startPoint.y = this._enemy.centerY + this._enemy.y;\r\n\r\n            endPoint.x = object.centerX + object.x;\r\n            endPoint.y = object.centerY + object.y;\r\n            \r\n            if(object.name == 'projectile' && this._enemy.name == 'spikes') {\r\n                console.log(\"distance:\" + this.distance(startPoint, endPoint));\r\n                console.log(\"min distance:\" + minimumDistance);\r\n            }\r\n\r\n            /* check if the distance between the player and \r\n              the other object is less than the minimum distance */\r\n            if (this.distance(startPoint, endPoint) <= minimumDistance) {\r\n                isCollision = true;\r\n            }\r\n\r\n            return isCollision;\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}